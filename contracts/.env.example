# ==================================================================
# KhipuVault - Environment Configuration Template
# ==================================================================
# Copy this file to .env and fill in your values
# Never commit .env to git!
# ==================================================================

# ==================================================================
# DEPLOYMENT CONFIGURATION
# ==================================================================

# Private key for deployment (NEVER commit the real .env!)
DEPLOYER_PRIVATE_KEY=0x0000000000000000000000000000000000000000000000000000000000000000

# Fee collector address (receives protocol fees)
# If not set, defaults to deployer address
FEE_COLLECTOR_ADDRESS=

# ==================================================================
# RPC ENDPOINTS
# ==================================================================

# Ethereum Mainnet
MAINNET_RPC_URL=https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY

# Sepolia Testnet (recommended for testing)
SEPOLIA_RPC_URL=https://eth-sepolia.g.alchemy.com/v2/YOUR_API_KEY

# Matsnet (Mezo Bitcoin Testnet - Sepolia based)
MATSNET_RPC_URL=https://rpc.matsnet.io
# or
# MATSNET_RPC_URL=https://eth-sepolia.g.alchemy.com/v2/YOUR_API_KEY

# Local Anvil
ANVIL_RPC_URL=http://127.0.0.1:8545

# ==================================================================
# MEZO PROTOCOL CONTRACTS (Matsnet Testnet)
# ==================================================================
# Official Mezo MUSD protocol addresses on Matsnet
# Source: https://docs.mezo.org/developers/contracts

# Main Mezo contracts
MATSNET_BORROWER_OPERATIONS=0x0000000000000000000000000000000000000000
MATSNET_PRICE_FEED=0x0000000000000000000000000000000000000000
MATSNET_HINT_HELPERS=0x0000000000000000000000000000000000000000
MATSNET_TROVE_MANAGER=0x0000000000000000000000000000000000000000

# Optional: MUSD token address (if already deployed)
MATSNET_MUSD_TOKEN=0x0000000000000000000000000000000000000000

# ==================================================================
# CHAINLINK VRF CONFIGURATION (for LotteryPool)
# ==================================================================
# Source: https://docs.chain.link/vrf/v2/subscription/supported-networks

# Sepolia VRF Coordinator
VRF_COORDINATOR_ADDRESS=0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625

# Your VRF Subscription ID (create at vrf.chain.link)
VRF_SUBSCRIPTION_ID=

# Sepolia VRF Key Hash (500 gwei)
VRF_KEY_HASH=0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c

# Mainnet VRF Coordinator (for future mainnet deployment)
# VRF_COORDINATOR_ADDRESS_MAINNET=0x271682DEB8C4E0901D1a1550aD2e64D568E69909
# VRF_KEY_HASH_MAINNET=0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef

# ==================================================================
# DEPLOYED CONTRACT ADDRESSES
# ==================================================================
# These will be auto-filled after running deployment scripts
# You can also manually set them here

# Mock Tokens (Testnet only)
WBTC_ADDRESS=
MUSD_ADDRESS=

# Core Integrations
MEZO_INTEGRATION_ADDRESS=
YIELD_AGGREGATOR_ADDRESS=

# Savings Pools
INDIVIDUAL_POOL_ADDRESS=
COOPERATIVE_POOL_ADDRESS=
LOTTERY_POOL_ADDRESS=
ROTATING_POOL_ADDRESS=

# ==================================================================
# PROTOCOL PARAMETERS
# ==================================================================

# Mezo Integration Configuration
TARGET_LTV=5000                    # 50% (in basis points: 5000 = 50%)
MAX_FEE_PERCENTAGE=500             # 5% max fee (in basis points)

# Yield Aggregator Configuration
INITIAL_VAULT_APR=600              # 6% APR for initial test vault (basis points)

# Pool Parameters (optional overrides)
# PERFORMANCE_FEE=100              # 1% performance fee (basis points)
# MIN_DEPOSIT=5000000              # 0.05 BTC in satoshis
# MAX_DEPOSIT=1000000000           # 10 BTC in satoshis

# ==================================================================
# ETHERSCAN/BLOCK EXPLORER API KEYS
# ==================================================================
# For contract verification

ETHERSCAN_API_KEY=
SEPOLIA_ETHERSCAN_API_KEY=         # Usually same as ETHERSCAN_API_KEY
# MATSNET_EXPLORER_API_KEY=        # If Matsnet has separate explorer

# ==================================================================
# TESTING & DEVELOPMENT
# ==================================================================

# Foundry verbosity
FOUNDRY_VERBOSITY=3                # 0-5, higher = more verbose

# Gas reporting
REPORT_GAS=true
COINMARKETCAP_API_KEY=             # For gas price in USD

# Code coverage
COVERAGE=false

# ==================================================================
# SECURITY & MONITORING
# ==================================================================

# Tenderly (for monitoring and debugging)
TENDERLY_PROJECT=
TENDERLY_USERNAME=
TENDERLY_ACCESS_KEY=

# OpenZeppelin Defender (for automation & monitoring)
DEFENDER_API_KEY=
DEFENDER_API_SECRET=

# ==================================================================
# ADDITIONAL CONFIGURATION
# ==================================================================

# Optimizer settings (already in foundry.toml but can override)
# OPTIMIZER_RUNS=200

# Solidity version
# SOLC_VERSION=0.8.25

# ==================================================================
# EXAMPLE TESTNET FAUCETS
# ==================================================================
# Get testnet ETH from these faucets:
# - Sepolia: https://sepoliafaucet.com/
# - Sepolia: https://www.alchemy.com/faucets/ethereum-sepolia
# - Chainlink Faucet: https://faucets.chain.link/

# Get testnet LINK for VRF:
# - Chainlink Faucet: https://faucets.chain.link/

# ==================================================================
# DEPLOYMENT CHECKLIST
# ==================================================================
# 
# 1. Setup:
#    [ ] Copy .env.example to .env
#    [ ] Fill in DEPLOYER_PRIVATE_KEY
#    [ ] Fill in RPC URLs (Sepolia/Matsnet)
#    [ ] Get testnet ETH from faucet
#
# 2. Mezo Integration (if using Matsnet):
#    [ ] Get Mezo protocol addresses from docs
#    [ ] Fill in MATSNET_* variables
#
# 3. Chainlink VRF (for LotteryPool):
#    [ ] Create subscription at vrf.chain.link
#    [ ] Fill in VRF_SUBSCRIPTION_ID
#    [ ] Get testnet LINK tokens
#
# 4. Deploy:
#    [ ] Run: make deploy-tokens-sepolia
#    [ ] Run: make deploy-integrations-sepolia
#    [ ] Run: make deploy-pools-sepolia
#
# 5. Post-deployment:
#    [ ] Verify contracts on Etherscan
#    [ ] Add LotteryPool to VRF subscription
#    [ ] Fund contracts with test tokens
#    [ ] Test all pool functionalities
#
# ==================================================================
